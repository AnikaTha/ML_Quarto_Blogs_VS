{
  "hash": "90f7769bbbe31fdb90ae61b52768c04d",
  "result": {
    "markdown": "---\ntitle: Pokemon Type Classification\nauthor: Anika Thatavarthy\ndate: '2023-12-06'\ncategories:\n  - code\n---\n\nClassifying Pokemon into their Type1 based on Attack and Defense Stats\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n%matplotlib inline\n```\n:::\n\n\n## Importing Data\n\n- talk about the dataset\nImporting quantitative and categorical data separately. Only quantitative data will be used for classification\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv('./pokemon.csv')\ndf2 = df.select_dtypes(include=['float64','int64'])\ndf3 = df.select_dtypes(include=['object'])\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf2.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>against_bug</th>\n      <th>against_dark</th>\n      <th>against_dragon</th>\n      <th>against_electric</th>\n      <th>against_fairy</th>\n      <th>against_fight</th>\n      <th>against_fire</th>\n      <th>against_flying</th>\n      <th>against_ghost</th>\n      <th>against_grass</th>\n      <th>...</th>\n      <th>height_m</th>\n      <th>hp</th>\n      <th>percentage_male</th>\n      <th>pokedex_number</th>\n      <th>sp_attack</th>\n      <th>sp_defense</th>\n      <th>speed</th>\n      <th>weight_kg</th>\n      <th>generation</th>\n      <th>is_legendary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>0.7</td>\n      <td>45</td>\n      <td>88.1</td>\n      <td>1</td>\n      <td>65</td>\n      <td>65</td>\n      <td>45</td>\n      <td>6.9</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>60</td>\n      <td>88.1</td>\n      <td>2</td>\n      <td>80</td>\n      <td>80</td>\n      <td>60</td>\n      <td>13.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>80</td>\n      <td>88.1</td>\n      <td>3</td>\n      <td>122</td>\n      <td>120</td>\n      <td>80</td>\n      <td>100.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>...</td>\n      <td>0.6</td>\n      <td>39</td>\n      <td>88.1</td>\n      <td>4</td>\n      <td>60</td>\n      <td>50</td>\n      <td>65</td>\n      <td>8.5</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>...</td>\n      <td>1.1</td>\n      <td>58</td>\n      <td>88.1</td>\n      <td>5</td>\n      <td>80</td>\n      <td>65</td>\n      <td>80</td>\n      <td>19.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 34 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf3.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>abilities</th>\n      <th>capture_rate</th>\n      <th>classfication</th>\n      <th>japanese_name</th>\n      <th>name</th>\n      <th>type1</th>\n      <th>type2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>['Overgrow', 'Chlorophyll']</td>\n      <td>45</td>\n      <td>Seed Pokémon</td>\n      <td>Fushigidaneフシギダネ</td>\n      <td>Bulbasaur</td>\n      <td>grass</td>\n      <td>poison</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>['Overgrow', 'Chlorophyll']</td>\n      <td>45</td>\n      <td>Seed Pokémon</td>\n      <td>Fushigisouフシギソウ</td>\n      <td>Ivysaur</td>\n      <td>grass</td>\n      <td>poison</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>['Overgrow', 'Chlorophyll']</td>\n      <td>45</td>\n      <td>Seed Pokémon</td>\n      <td>Fushigibanaフシギバナ</td>\n      <td>Venusaur</td>\n      <td>grass</td>\n      <td>poison</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>['Blaze', 'Solar Power']</td>\n      <td>45</td>\n      <td>Lizard Pokémon</td>\n      <td>Hitokageヒトカゲ</td>\n      <td>Charmander</td>\n      <td>fire</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>['Blaze', 'Solar Power']</td>\n      <td>45</td>\n      <td>Flame Pokémon</td>\n      <td>Lizardoリザード</td>\n      <td>Charmeleon</td>\n      <td>fire</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Data Preprocessing\n\nEncoding type1 labels\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nlabels = le.fit_transform(df['type1'])\nprint(len(le.classes_))\nprint(le.classes_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n18\n['bug' 'dark' 'dragon' 'electric' 'fairy' 'fighting' 'fire' 'flying'\n 'ghost' 'grass' 'ground' 'ice' 'normal' 'poison' 'psychic' 'rock' 'steel'\n 'water']\n```\n:::\n:::\n\n\nEncoding type2 labels\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntype2_le = preprocessing.LabelEncoder()\ntype2 = type2_le.fit_transform(df['type2'].astype(str))\nlen(type2_le.classes_)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n19\n```\n:::\n:::\n\n\nFill missing data points with the mean of that column\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor i in df2:\n    if df[i].isnull().values.any():\n            df[i].fillna(df[i].mean(), inplace=True)\n```\n:::\n\n\nMake sure that there are no NaN values remaining\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf[list(df2)].isnull().values.any()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nFalse\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf.loc[:, df.columns.str.contains('against')].plot(kind=\"box\", figsize=(20,10));\nplt.xticks(rotation=90);\n```\n\n::: {.cell-output .cell-output-display}\n![](classification_files/figure-html/cell-10-output-1.png){width=1538 height=874}\n:::\n:::\n\n\nCreating dataset for training, combining encoded labels with imputed attack and defense values from original dataset\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndata = {\n    'attack': df['attack'],\n    'defense': df['defense'],\n    'sp_attack': df['sp_attack'],\n    'sp_defense': df['sp_defense'],\n    'type2': type2,\n    'type1': df['type1']\n}\ndata = pd.DataFrame(data)\ndata = df.filter(like='against').join(data)\n\nX = data.drop('type1', axis=1)\ny = data['type1']\nprint(list(X))\nX.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['against_bug', 'against_dark', 'against_dragon', 'against_electric', 'against_fairy', 'against_fight', 'against_fire', 'against_flying', 'against_ghost', 'against_grass', 'against_ground', 'against_ice', 'against_normal', 'against_poison', 'against_psychic', 'against_rock', 'against_steel', 'against_water', 'attack', 'defense', 'sp_attack', 'sp_defense', 'type2']\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>against_bug</th>\n      <th>against_dark</th>\n      <th>against_dragon</th>\n      <th>against_electric</th>\n      <th>against_fairy</th>\n      <th>against_fight</th>\n      <th>against_fire</th>\n      <th>against_flying</th>\n      <th>against_ghost</th>\n      <th>against_grass</th>\n      <th>...</th>\n      <th>against_poison</th>\n      <th>against_psychic</th>\n      <th>against_rock</th>\n      <th>against_steel</th>\n      <th>against_water</th>\n      <th>attack</th>\n      <th>defense</th>\n      <th>sp_attack</th>\n      <th>sp_defense</th>\n      <th>type2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>49</td>\n      <td>49</td>\n      <td>65</td>\n      <td>65</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>62</td>\n      <td>63</td>\n      <td>80</td>\n      <td>80</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>100</td>\n      <td>123</td>\n      <td>122</td>\n      <td>120</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>52</td>\n      <td>43</td>\n      <td>60</td>\n      <td>50</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>0.5</td>\n      <td>2.0</td>\n      <td>64</td>\n      <td>58</td>\n      <td>80</td>\n      <td>65</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 23 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Decision Tree Classifier\n\n- what is a decision tree, how does it work, complications/shortcomings\n- equations\n- applications\n- talk about what I am doing in the next blocks\n- cross validation\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score, KFold\nkfold = KFold(n_splits=10, shuffle=True)\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X,y)\n\nresult = cross_val_score(clf, X, y, cv=kfold, scoring='accuracy')\n\nprint(result.mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.9214197530864198\n```\n:::\n:::\n\n\nVisualizing the Tree\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# plotting decision tree with dilineating features -> FIX LATER\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(60,36))\ntree_plot = sklearn.tree.plot_tree(clf, filled=True, rounded=True, class_names=list(y.unique()), feature_names=list(X.columns))\n```\n\n::: {.cell-output .cell-output-display}\n![](classification_files/figure-html/cell-13-output-1.png){width=4483 height=2680}\n:::\n:::\n\n\n## Logistic Regression Classifier\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=48)\nlog_reg = LogisticRegression(max_iter=1000)\nlog_reg.fit(X_train, y_train)\naccuracy_score(y_test, log_reg.predict(X_test))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\anika\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:460: ConvergenceWarning:\n\nlbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0.9203980099502488\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nnum_components = []\naccuracies = []\nfrom sklearn.decomposition import PCA\nfor n in range(2,21):\n    pca = PCA(n_components=n)\n    principalComponents = pca.fit_transform(X)\n    X_train, X_test, y_train, y_test = train_test_split(principalComponents, y, test_size=0.25, random_state=48)\n    log_reg = LogisticRegression(max_iter=1000)\n    log_reg.fit(X_train, y_train)\n    accuracy = accuracy_score(y_test, log_reg.predict(X_test))\n    print( str(n) + \" Principal components produce an accuracy of: \" + str(accuracy))\n    num_components.append(n)\n    accuracies.append(accuracy*100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2 Principal components produce an accuracy of: 0.1890547263681592\n3 Principal components produce an accuracy of: 0.17412935323383086\n4 Principal components produce an accuracy of: 0.18407960199004975\n5 Principal components produce an accuracy of: 0.19900497512437812\n6 Principal components produce an accuracy of: 0.35323383084577115\n7 Principal components produce an accuracy of: 0.5024875621890548\n8 Principal components produce an accuracy of: 0.6865671641791045\n9 Principal components produce an accuracy of: 0.7611940298507462\n10 Principal components produce an accuracy of: 0.8009950248756219\n11 Principal components produce an accuracy of: 0.8507462686567164\n12 Principal components produce an accuracy of: 0.8756218905472637\n13 Principal components produce an accuracy of: 0.8955223880597015\n14 Principal components produce an accuracy of: 0.8905472636815921\n15 Principal components produce an accuracy of: 0.9054726368159204\n16 Principal components produce an accuracy of: 0.9154228855721394\n17 Principal components produce an accuracy of: 0.9104477611940298\n18 Principal components produce an accuracy of: 0.9154228855721394\n19 Principal components produce an accuracy of: 0.9203980099502488\n20 Principal components produce an accuracy of: 0.9203980099502488\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\anika\\anaconda3\\Lib\\site-packages\\sklearn\\linear_model\\_logistic.py:460: ConvergenceWarning:\n\nlbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nplt.figure(figsize=(10,7))\nplt.plot(num_components, accuracies)\nplt.title(\"Number of Components vs. Accuracy\")\nplt.xlabel(\"# Components\")\nplt.ylabel(\"% Accuracy\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nText(0, 0.5, '% Accuracy')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](classification_files/figure-html/cell-16-output-2.png){width=808 height=597}\n:::\n:::\n\n\nVisualizing the classifier's accuracy using a confusion matrix\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix\ny_pred = log_reg.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\ncm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\ncm = pd.DataFrame(cm, index=le.classes_, columns=le.classes_)\nplt.subplots(figsize=(20,15));\nsns.heatmap(cm, annot=True);\n```\n\n::: {.cell-output .cell-output-display}\n![](classification_files/figure-html/cell-17-output-1.png){width=1392 height=1155}\n:::\n:::\n\n\n",
    "supporting": [
      "classification_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}