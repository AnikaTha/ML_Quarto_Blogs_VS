{"title":"Pokemon Type Classification","markdown":{"yaml":{"title":"Pokemon Type Classification","author":"Anika Thatavarthy","date":"2023-12-06","image":"pokemon.jpg","categories":["code"],"jupyter":"python3"},"headingText":"Importing Data","containsRefs":false,"markdown":"\n\nClassifying Pokemon into their Type1 based on Attack and Defense Stats\n\n```{python}\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n%matplotlib inline\n```\n\n\n- talk about the dataset\nImporting quantitative and categorical data separately. Only quantitative data will be used for classification\n\n```{python}\ndf = pd.read_csv('./pokemon.csv')\ndf2 = df.select_dtypes(include=['float64','int64'])\ndf3 = df.select_dtypes(include=['object'])\n```\n\n```{python}\ndf2.head()\n```\n\n```{python}\ndf3.head()\n```\n\n## Data Preprocessing\n\nEncoding type1 labels\n\n```{python}\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nlabels = le.fit_transform(df['type1'])\nprint(len(le.classes_))\nprint(le.classes_)\n```\n\nEncoding type2 labels\n\n```{python}\ntype2_le = preprocessing.LabelEncoder()\ntype2 = type2_le.fit_transform(df['type2'].astype(str))\nlen(type2_le.classes_)\n```\n\nFill missing data points with the mean of that column\n\n```{python}\nfor i in df2:\n    if df[i].isnull().values.any():\n            df[i].fillna(df[i].mean(), inplace=True)\n```\n\nMake sure that there are no NaN values remaining\n\n```{python}\ndf[list(df2)].isnull().values.any()\n```\n\n```{python}\ndf.loc[:, df.columns.str.contains('against')].plot(kind=\"box\", figsize=(20,10));\nplt.xticks(rotation=90);\n```\n\nCreating dataset for training, combining encoded labels with imputed attack and defense values from original dataset\n\n```{python}\ndata = {\n    'attack': df['attack'],\n    'defense': df['defense'],\n    'sp_attack': df['sp_attack'],\n    'sp_defense': df['sp_defense'],\n    'type2': type2,\n    'type1': df['type1']\n}\ndata = pd.DataFrame(data)\ndata = df.filter(like='against').join(data)\n\nX = data.drop('type1', axis=1)\ny = data['type1']\nprint(list(X))\nX.head()\n```\n\n## Decision Tree Classifier\n\n- what is a decision tree, how does it work, complications/shortcomings\n- equations\n- applications\n- talk about what I am doing in the next blocks\n- cross validation\n\n```{python}\nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score, KFold\nkfold = KFold(n_splits=10, shuffle=True)\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X,y)\n\nresult = cross_val_score(clf, X, y, cv=kfold, scoring='accuracy')\n\nprint(result.mean())\n```\n\nVisualizing the Tree\n\n```{python}\n# plotting decision tree with dilineating features -> FIX LATER\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(60,36))\ntree_plot = sklearn.tree.plot_tree(clf, filled=True, rounded=True, class_names=list(y.unique()), feature_names=list(X.columns))\n```\n\n## Logistic Regression Classifier\n\n```{python}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=48)\nlog_reg = LogisticRegression(max_iter=1000)\nlog_reg.fit(X_train, y_train)\naccuracy_score(y_test, log_reg.predict(X_test))\n```\n\n```{python}\nnum_components = []\naccuracies = []\nfrom sklearn.decomposition import PCA\nfor n in range(2,21):\n    pca = PCA(n_components=n)\n    principalComponents = pca.fit_transform(X)\n    X_train, X_test, y_train, y_test = train_test_split(principalComponents, y, test_size=0.25, random_state=48)\n    log_reg = LogisticRegression(max_iter=1000)\n    log_reg.fit(X_train, y_train)\n    accuracy = accuracy_score(y_test, log_reg.predict(X_test))\n    print( str(n) + \" Principal components produce an accuracy of: \" + str(accuracy))\n    num_components.append(n)\n    accuracies.append(accuracy*100)\n```\n\n```{python}\nplt.figure(figsize=(10,7))\nplt.plot(num_components, accuracies)\nplt.title(\"Number of Components vs. Accuracy\")\nplt.xlabel(\"# Components\")\nplt.ylabel(\"% Accuracy\")\n```\n\nVisualizing the classifier's accuracy using a confusion matrix\n\n```{python}\nfrom sklearn.metrics import confusion_matrix\ny_pred = log_reg.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\ncm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\ncm = pd.DataFrame(cm, index=le.classes_, columns=le.classes_)\nplt.subplots(figsize=(20,15));\nsns.heatmap(cm, annot=True);\n```\n\n","srcMarkdownNoYaml":"\n\nClassifying Pokemon into their Type1 based on Attack and Defense Stats\n\n```{python}\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n%matplotlib inline\n```\n\n## Importing Data\n\n- talk about the dataset\nImporting quantitative and categorical data separately. Only quantitative data will be used for classification\n\n```{python}\ndf = pd.read_csv('./pokemon.csv')\ndf2 = df.select_dtypes(include=['float64','int64'])\ndf3 = df.select_dtypes(include=['object'])\n```\n\n```{python}\ndf2.head()\n```\n\n```{python}\ndf3.head()\n```\n\n## Data Preprocessing\n\nEncoding type1 labels\n\n```{python}\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nlabels = le.fit_transform(df['type1'])\nprint(len(le.classes_))\nprint(le.classes_)\n```\n\nEncoding type2 labels\n\n```{python}\ntype2_le = preprocessing.LabelEncoder()\ntype2 = type2_le.fit_transform(df['type2'].astype(str))\nlen(type2_le.classes_)\n```\n\nFill missing data points with the mean of that column\n\n```{python}\nfor i in df2:\n    if df[i].isnull().values.any():\n            df[i].fillna(df[i].mean(), inplace=True)\n```\n\nMake sure that there are no NaN values remaining\n\n```{python}\ndf[list(df2)].isnull().values.any()\n```\n\n```{python}\ndf.loc[:, df.columns.str.contains('against')].plot(kind=\"box\", figsize=(20,10));\nplt.xticks(rotation=90);\n```\n\nCreating dataset for training, combining encoded labels with imputed attack and defense values from original dataset\n\n```{python}\ndata = {\n    'attack': df['attack'],\n    'defense': df['defense'],\n    'sp_attack': df['sp_attack'],\n    'sp_defense': df['sp_defense'],\n    'type2': type2,\n    'type1': df['type1']\n}\ndata = pd.DataFrame(data)\ndata = df.filter(like='against').join(data)\n\nX = data.drop('type1', axis=1)\ny = data['type1']\nprint(list(X))\nX.head()\n```\n\n## Decision Tree Classifier\n\n- what is a decision tree, how does it work, complications/shortcomings\n- equations\n- applications\n- talk about what I am doing in the next blocks\n- cross validation\n\n```{python}\nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score, KFold\nkfold = KFold(n_splits=10, shuffle=True)\n\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X,y)\n\nresult = cross_val_score(clf, X, y, cv=kfold, scoring='accuracy')\n\nprint(result.mean())\n```\n\nVisualizing the Tree\n\n```{python}\n# plotting decision tree with dilineating features -> FIX LATER\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(60,36))\ntree_plot = sklearn.tree.plot_tree(clf, filled=True, rounded=True, class_names=list(y.unique()), feature_names=list(X.columns))\n```\n\n## Logistic Regression Classifier\n\n```{python}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=48)\nlog_reg = LogisticRegression(max_iter=1000)\nlog_reg.fit(X_train, y_train)\naccuracy_score(y_test, log_reg.predict(X_test))\n```\n\n```{python}\nnum_components = []\naccuracies = []\nfrom sklearn.decomposition import PCA\nfor n in range(2,21):\n    pca = PCA(n_components=n)\n    principalComponents = pca.fit_transform(X)\n    X_train, X_test, y_train, y_test = train_test_split(principalComponents, y, test_size=0.25, random_state=48)\n    log_reg = LogisticRegression(max_iter=1000)\n    log_reg.fit(X_train, y_train)\n    accuracy = accuracy_score(y_test, log_reg.predict(X_test))\n    print( str(n) + \" Principal components produce an accuracy of: \" + str(accuracy))\n    num_components.append(n)\n    accuracies.append(accuracy*100)\n```\n\n```{python}\nplt.figure(figsize=(10,7))\nplt.plot(num_components, accuracies)\nplt.title(\"Number of Components vs. Accuracy\")\nplt.xlabel(\"# Components\")\nplt.ylabel(\"% Accuracy\")\n```\n\nVisualizing the classifier's accuracy using a confusion matrix\n\n```{python}\nfrom sklearn.metrics import confusion_matrix\ny_pred = log_reg.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\ncm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\ncm = pd.DataFrame(cm, index=le.classes_, columns=le.classes_)\nplt.subplots(figsize=(20,15));\nsns.heatmap(cm, annot=True);\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"classification.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true,"title":"Pokemon Type Classification","author":"Anika Thatavarthy","date":"2023-12-06","image":"pokemon.jpg","categories":["code"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}