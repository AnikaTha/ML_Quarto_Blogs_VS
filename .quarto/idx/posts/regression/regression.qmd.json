{"title":"Salary prediction via Linear Regression","markdown":{"yaml":{"title":"Salary prediction via Linear Regression","author":"Anika Thatavarthy","image":"salary.jpg","date":"2023-12-06","categories":["code"],"jupyter":"python3"},"headingText":"Importing data","containsRefs":false,"markdown":"\n\nCan Salary be accurately predicted using metrics such as age and years of experience, gender and education level?\n\n```{python}\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n```\n\n\n```{python}\ndataset = pd.read_csv(\"salary_data.csv\")\ndf=dataset.copy()\ndf\n```\n\n```{python}\nlabel=\"Salary\"\ndf.describe()\n```\n\n```{python}\nfor col in df.select_dtypes(\"float\"or\"int\"):\n    print(col)\n    print(f'\\taverage with NaN: {df[col].mean()}')\n    print(f'\\taverage without NaN: {df[col].mean(skipna=True)}')\n```\n\n```{python}\nfor col in df.select_dtypes(\"object\"):\n    print(col)\n    print(f'\\tmost common value with NaN: {df[col].mode()[0]} and without NaN: {df[col].value_counts().idxmax()}')\n```\n\n## Data Preprocessing\n\n### Replacing quantitive feature NaN with average, categorical NaN with most common value\n\nPrinting the whether the number of rows with NaN is 0 to make sure values were imputed properly\n\n```{python}\nfor col in df.columns : \n    if col in df.select_dtypes(include=['object']).columns:\n        df[col]=df[col].fillna(df[col].dropna().mode()[0])\n        print(col,df[col].isna().sum() == 0)\n        \n    else :\n        df[col]=df[col].fillna(df[col].mean(skipna=True))\n        print(col,df[col].isna().sum() == 0)\n```\n\nCalculating value counts of each column\n\n```{python}\nfor col in df.select_dtypes('object'):\n    print(col,'-------->')\n    print(df[col].value_counts().reset_index())\n    print()\n    print()\n```\n\nConverting value counts to frequencies\n\n```{python}\nfor col in df.select_dtypes(include=['object']).columns:\n    frequency_table = df[col].value_counts().reset_index()\n    frequency_table.columns = [col, 'Count']\n    frequency_table['Frequency (%)'] = (frequency_table['Count'] / len(df)) * 100\n    print(\"Counts per\", col)\n    print(frequency_table)\n    print()\n```\n\n```{python}\ndf_summary=df.describe()\ndf_summary\n```\n\nPlotting distribution of each quantitative feature (histogram and boxplot)\n\n```{python}\nfor col in df.select_dtypes(include=[\"float\",'int']).columns:\n    plt.hist(df[col], bins=10)\n    plt.xlabel(col)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of \" + col)\n    plt.show()\n    plt.boxplot(df[col])\n    plt.ylabel(col)\n    plt.title(\"Box Plot of \" + col)\n    plt.show()\n```\n\nPlotting distribution of categorical features (bar chart)\n\n```{python}\nfor col in df.select_dtypes(\"object\").columns:\n    value_counts=df[col].value_counts()\n    if col == \"Job Title\": plt.figure(figsize=(20,20))\n    else: plt.figure(figsize=(10,10))\n    value_counts.plot.bar()\n    plt.xlabel(\"Category\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Bar chart of \" + col)\n    plt.show()\n```\n\nIdentifying potential outliers by calculating 1.5\\*Interquartile range\n\n```{python}\nfor col in df.select_dtypes('float').columns:\n    q1=np.percentile(df[col],25)\n    q3=np.percentile(df[col],75)\n    iqr=q3-q1\n    inf=q1-(1.5)*iqr\n    sup=q3+(1.5)*iqr\n    outliers = df[(df[col] < inf) | (df[col] > sup)]\n    print(col,\"Outliers:\", outliers)\n```\n\nPrinting the mean per unique value in each feature\n\n```{python}\nfor num_var in df.select_dtypes(\"float\"):\n    for cat_var in df.select_dtypes(\"object\"):\n        mean_per_category = df.groupby(cat_var)[num_var].mean()\n        print(f'Mean of {num_var} per {cat_var}: {mean_per_category}\\n')\n```\n\nMapping categorical values to numerical values (Gender to 0/1, Education to numbers 1-3)\n\n```{python}\ndf_standarized=df\n```\n\n```{python}\ndic_gender={\"Male\":0,\"Female\":1}\ndf_standarized['Gender']=df_standarized['Gender'].map(dic_gender)\n```\n\n```{python}\ndic_job={\"Bachelor's\":1,\"Master's\":2,\"PhD\":3}\ndf_standarized['Education Level']=df_standarized['Education Level'].map(dic_job)\n```\n\nLooking at trends in features across each categorical values\n\n```{python}\nsns.pairplot(df_standarized,hue=\"Education Level\");\nplt.title(\"Feature Trends Across Education Level\");\nplt.show();\n```\n\n```{python}\nsns.pairplot(df_standarized,hue=\"Gender\");\nplt.title(\"Feature Trends Across Genders\");\nplt.show();\n```\n\n```{python}\ndf_standarized_final=df_standarized.drop(\"Job Title\",axis=1)\n```\n\n### Splitting data into labels and features\n\n```{python}\ndef pre_processing(df):\n    X=df.drop('Salary',axis=1)\n    Y=df['Salary']\n    return X,Y\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\n```\n\n```{python}\ntrain_set,test_set=train_test_split(df_standarized_final,test_size=0.25, random_state=0)\ntrain_set.shape\n```\n\n```{python}\nX_train, y_train = pre_processing(train_set)\nX_test, y_test = pre_processing(test_set)\n```\n\n## Linear Regression Model\n\n```{python}\ndef evalution(model):\n    model.fit(X_train , y_train)\n    Ypred=model.predict(X_test)\n    plt.figure(figsize=(15,15))\n    plt.xlim(0, 210000)\n    plt.ylim(0, 210000)\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(\"Predicted Salary vs. Actual Salary\")\n    plt.scatter(y_test,Ypred,s=200)\n    plt.plot(np.unique(y_test), np.poly1d(np.polyfit(y_test, Ypred, 1))(np.unique(y_test)), color='red')\n    plt.legend()\n    \n```\n\n```{python}\nmodel=LinearRegression()\nevalution(model)\n```\n\n```{python}\nmodel.coef_, model.intercept_\n```\n\n```{python}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n\n### Support Vector Regression Model\n\n```{python}\nmodel=SVR(kernel=\"linear\")\nevalution(model)\n```\n\n```{python}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n","srcMarkdownNoYaml":"\n\nCan Salary be accurately predicted using metrics such as age and years of experience, gender and education level?\n\n```{python}\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n```\n\n## Importing data\n\n```{python}\ndataset = pd.read_csv(\"salary_data.csv\")\ndf=dataset.copy()\ndf\n```\n\n```{python}\nlabel=\"Salary\"\ndf.describe()\n```\n\n```{python}\nfor col in df.select_dtypes(\"float\"or\"int\"):\n    print(col)\n    print(f'\\taverage with NaN: {df[col].mean()}')\n    print(f'\\taverage without NaN: {df[col].mean(skipna=True)}')\n```\n\n```{python}\nfor col in df.select_dtypes(\"object\"):\n    print(col)\n    print(f'\\tmost common value with NaN: {df[col].mode()[0]} and without NaN: {df[col].value_counts().idxmax()}')\n```\n\n## Data Preprocessing\n\n### Replacing quantitive feature NaN with average, categorical NaN with most common value\n\nPrinting the whether the number of rows with NaN is 0 to make sure values were imputed properly\n\n```{python}\nfor col in df.columns : \n    if col in df.select_dtypes(include=['object']).columns:\n        df[col]=df[col].fillna(df[col].dropna().mode()[0])\n        print(col,df[col].isna().sum() == 0)\n        \n    else :\n        df[col]=df[col].fillna(df[col].mean(skipna=True))\n        print(col,df[col].isna().sum() == 0)\n```\n\nCalculating value counts of each column\n\n```{python}\nfor col in df.select_dtypes('object'):\n    print(col,'-------->')\n    print(df[col].value_counts().reset_index())\n    print()\n    print()\n```\n\nConverting value counts to frequencies\n\n```{python}\nfor col in df.select_dtypes(include=['object']).columns:\n    frequency_table = df[col].value_counts().reset_index()\n    frequency_table.columns = [col, 'Count']\n    frequency_table['Frequency (%)'] = (frequency_table['Count'] / len(df)) * 100\n    print(\"Counts per\", col)\n    print(frequency_table)\n    print()\n```\n\n```{python}\ndf_summary=df.describe()\ndf_summary\n```\n\nPlotting distribution of each quantitative feature (histogram and boxplot)\n\n```{python}\nfor col in df.select_dtypes(include=[\"float\",'int']).columns:\n    plt.hist(df[col], bins=10)\n    plt.xlabel(col)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of \" + col)\n    plt.show()\n    plt.boxplot(df[col])\n    plt.ylabel(col)\n    plt.title(\"Box Plot of \" + col)\n    plt.show()\n```\n\nPlotting distribution of categorical features (bar chart)\n\n```{python}\nfor col in df.select_dtypes(\"object\").columns:\n    value_counts=df[col].value_counts()\n    if col == \"Job Title\": plt.figure(figsize=(20,20))\n    else: plt.figure(figsize=(10,10))\n    value_counts.plot.bar()\n    plt.xlabel(\"Category\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Bar chart of \" + col)\n    plt.show()\n```\n\nIdentifying potential outliers by calculating 1.5\\*Interquartile range\n\n```{python}\nfor col in df.select_dtypes('float').columns:\n    q1=np.percentile(df[col],25)\n    q3=np.percentile(df[col],75)\n    iqr=q3-q1\n    inf=q1-(1.5)*iqr\n    sup=q3+(1.5)*iqr\n    outliers = df[(df[col] < inf) | (df[col] > sup)]\n    print(col,\"Outliers:\", outliers)\n```\n\nPrinting the mean per unique value in each feature\n\n```{python}\nfor num_var in df.select_dtypes(\"float\"):\n    for cat_var in df.select_dtypes(\"object\"):\n        mean_per_category = df.groupby(cat_var)[num_var].mean()\n        print(f'Mean of {num_var} per {cat_var}: {mean_per_category}\\n')\n```\n\nMapping categorical values to numerical values (Gender to 0/1, Education to numbers 1-3)\n\n```{python}\ndf_standarized=df\n```\n\n```{python}\ndic_gender={\"Male\":0,\"Female\":1}\ndf_standarized['Gender']=df_standarized['Gender'].map(dic_gender)\n```\n\n```{python}\ndic_job={\"Bachelor's\":1,\"Master's\":2,\"PhD\":3}\ndf_standarized['Education Level']=df_standarized['Education Level'].map(dic_job)\n```\n\nLooking at trends in features across each categorical values\n\n```{python}\nsns.pairplot(df_standarized,hue=\"Education Level\");\nplt.title(\"Feature Trends Across Education Level\");\nplt.show();\n```\n\n```{python}\nsns.pairplot(df_standarized,hue=\"Gender\");\nplt.title(\"Feature Trends Across Genders\");\nplt.show();\n```\n\n```{python}\ndf_standarized_final=df_standarized.drop(\"Job Title\",axis=1)\n```\n\n### Splitting data into labels and features\n\n```{python}\ndef pre_processing(df):\n    X=df.drop('Salary',axis=1)\n    Y=df['Salary']\n    return X,Y\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\n```\n\n```{python}\ntrain_set,test_set=train_test_split(df_standarized_final,test_size=0.25, random_state=0)\ntrain_set.shape\n```\n\n```{python}\nX_train, y_train = pre_processing(train_set)\nX_test, y_test = pre_processing(test_set)\n```\n\n## Linear Regression Model\n\n```{python}\ndef evalution(model):\n    model.fit(X_train , y_train)\n    Ypred=model.predict(X_test)\n    plt.figure(figsize=(15,15))\n    plt.xlim(0, 210000)\n    plt.ylim(0, 210000)\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(\"Predicted Salary vs. Actual Salary\")\n    plt.scatter(y_test,Ypred,s=200)\n    plt.plot(np.unique(y_test), np.poly1d(np.polyfit(y_test, Ypred, 1))(np.unique(y_test)), color='red')\n    plt.legend()\n    \n```\n\n```{python}\nmodel=LinearRegression()\nevalution(model)\n```\n\n```{python}\nmodel.coef_, model.intercept_\n```\n\n```{python}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n\n### Support Vector Regression Model\n\n```{python}\nmodel=SVR(kernel=\"linear\")\nevalution(model)\n```\n\n```{python}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"regression.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"minty","title-block-banner":true,"title":"Salary prediction via Linear Regression","author":"Anika Thatavarthy","image":"salary.jpg","date":"2023-12-06","categories":["code"],"jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}