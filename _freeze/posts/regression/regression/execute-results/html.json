{
  "hash": "cf1ea5e8790b79b4210d40c7f77ca220",
  "result": {
    "markdown": "---\ntitle: Salary prediction via Linear Regression\n---\n\nCan Salary be accurately predicted using metrics such as age and years of experience, gender and education level?\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n```\n:::\n\n\n## Importing data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndataset = pd.read_csv(\"salary_data.csv\")\ndf=dataset.copy()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Education Level</th>\n      <th>Job Title</th>\n      <th>Years of Experience</th>\n      <th>Salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32.0</td>\n      <td>Male</td>\n      <td>Bachelor's</td>\n      <td>Software Engineer</td>\n      <td>5.0</td>\n      <td>90000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28.0</td>\n      <td>Female</td>\n      <td>Master's</td>\n      <td>Data Analyst</td>\n      <td>3.0</td>\n      <td>65000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>45.0</td>\n      <td>Male</td>\n      <td>PhD</td>\n      <td>Senior Manager</td>\n      <td>15.0</td>\n      <td>150000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>36.0</td>\n      <td>Female</td>\n      <td>Bachelor's</td>\n      <td>Sales Associate</td>\n      <td>7.0</td>\n      <td>60000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>52.0</td>\n      <td>Male</td>\n      <td>Master's</td>\n      <td>Director</td>\n      <td>20.0</td>\n      <td>200000.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>370</th>\n      <td>35.0</td>\n      <td>Female</td>\n      <td>Bachelor's</td>\n      <td>Senior Marketing Analyst</td>\n      <td>8.0</td>\n      <td>85000.0</td>\n    </tr>\n    <tr>\n      <th>371</th>\n      <td>43.0</td>\n      <td>Male</td>\n      <td>Master's</td>\n      <td>Director of Operations</td>\n      <td>19.0</td>\n      <td>170000.0</td>\n    </tr>\n    <tr>\n      <th>372</th>\n      <td>29.0</td>\n      <td>Female</td>\n      <td>Bachelor's</td>\n      <td>Junior Project Manager</td>\n      <td>2.0</td>\n      <td>40000.0</td>\n    </tr>\n    <tr>\n      <th>373</th>\n      <td>34.0</td>\n      <td>Male</td>\n      <td>Bachelor's</td>\n      <td>Senior Operations Coordinator</td>\n      <td>7.0</td>\n      <td>90000.0</td>\n    </tr>\n    <tr>\n      <th>374</th>\n      <td>44.0</td>\n      <td>Female</td>\n      <td>PhD</td>\n      <td>Senior Business Analyst</td>\n      <td>15.0</td>\n      <td>150000.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>375 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlabel=\"Salary\"\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Years of Experience</th>\n      <th>Salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>373.000000</td>\n      <td>373.000000</td>\n      <td>373.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37.431635</td>\n      <td>10.030831</td>\n      <td>100577.345845</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.069073</td>\n      <td>6.557007</td>\n      <td>48240.013482</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>23.000000</td>\n      <td>0.000000</td>\n      <td>350.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>31.000000</td>\n      <td>4.000000</td>\n      <td>55000.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>36.000000</td>\n      <td>9.000000</td>\n      <td>95000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>44.000000</td>\n      <td>15.000000</td>\n      <td>140000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>53.000000</td>\n      <td>25.000000</td>\n      <td>250000.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfor col in df.select_dtypes(\"float\"or\"int\"):\n    print(col)\n    print(f'\\taverage with NaN: {df[col].mean()}')\n    print(f'\\taverage without NaN: {df[col].mean(skipna=True)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAge\n\taverage with NaN: 37.43163538873995\n\taverage without NaN: 37.43163538873995\nYears of Experience\n\taverage with NaN: 10.03083109919571\n\taverage without NaN: 10.03083109919571\nSalary\n\taverage with NaN: 100577.34584450402\n\taverage without NaN: 100577.34584450402\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfor col in df.select_dtypes(\"object\"):\n    print(col)\n    print(f'\\tmost common value with NaN: {df[col].mode()[0]} and without NaN: {df[col].value_counts().idxmax()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGender\n\tmost common value with NaN: Male and without NaN: Male\nEducation Level\n\tmost common value with NaN: Bachelor's and without NaN: Bachelor's\nJob Title\n\tmost common value with NaN: Director of Marketing and without NaN: Director of Marketing\n```\n:::\n:::\n\n\n## Data Preprocessing\n\n### Replacing quantitive feature NaN with average, categorical NaN with most common value\n\nPrinting the whether the number of rows with NaN is 0 to make sure values were imputed properly\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor col in df.columns : \n    if col in df.select_dtypes(include=['object']).columns:\n        df[col]=df[col].fillna(df[col].dropna().mode()[0])\n        print(col,df[col].isna().sum() == 0)\n        \n    else :\n        df[col]=df[col].fillna(df[col].mean(skipna=True))\n        print(col,df[col].isna().sum() == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAge True\nGender True\nEducation Level True\nJob Title True\nYears of Experience True\nSalary True\n```\n:::\n:::\n\n\nCalculating value counts of each column\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor col in df.select_dtypes('object'):\n    print(col,'-------->')\n    print(df[col].value_counts().reset_index())\n    print()\n    print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGender -------->\n   Gender  count\n0    Male    196\n1  Female    179\n\n\nEducation Level -------->\n  Education Level  count\n0      Bachelor's    226\n1        Master's     98\n2             PhD     51\n\n\nJob Title -------->\n                           Job Title  count\n0              Director of Marketing     14\n1             Director of Operations     11\n2            Senior Business Analyst     10\n3           Senior Marketing Analyst      9\n4           Senior Marketing Manager      9\n..                               ...    ...\n169     Business Development Manager      1\n170  Customer Service Representative      1\n171                       IT Manager      1\n172        Digital Marketing Manager      1\n173             Junior Web Developer      1\n\n[174 rows x 2 columns]\n\n\n```\n:::\n:::\n\n\nConverting value counts to frequencies\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfor col in df.select_dtypes(include=['object']).columns:\n    tableau_effectifs = df[col].value_counts().reset_index()\n    tableau_effectifs.columns = [col, 'Count']\n    tableau_effectifs['Frequency (%)'] = (tableau_effectifs['Count'] / len(df)) * 100\n    print(\"Counts per\", col)\n    print(tableau_effectifs)\n    print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCounts per Gender\n   Gender  Count  Frequency (%)\n0    Male    196      52.266667\n1  Female    179      47.733333\n\nCounts per Education Level\n  Education Level  Count  Frequency (%)\n0      Bachelor's    226      60.266667\n1        Master's     98      26.133333\n2             PhD     51      13.600000\n\nCounts per Job Title\n                           Job Title  Count  Frequency (%)\n0              Director of Marketing     14       3.733333\n1             Director of Operations     11       2.933333\n2            Senior Business Analyst     10       2.666667\n3           Senior Marketing Analyst      9       2.400000\n4           Senior Marketing Manager      9       2.400000\n..                               ...    ...            ...\n169     Business Development Manager      1       0.266667\n170  Customer Service Representative      1       0.266667\n171                       IT Manager      1       0.266667\n172        Digital Marketing Manager      1       0.266667\n173             Junior Web Developer      1       0.266667\n\n[174 rows x 3 columns]\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_summary=df.describe()\ndf_summary\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Years of Experience</th>\n      <th>Salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>375.000000</td>\n      <td>375.000000</td>\n      <td>375.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37.431635</td>\n      <td>10.030831</td>\n      <td>100577.345845</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.050146</td>\n      <td>6.539452</td>\n      <td>48110.856588</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>23.000000</td>\n      <td>0.000000</td>\n      <td>350.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>31.500000</td>\n      <td>4.000000</td>\n      <td>55000.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>36.000000</td>\n      <td>9.000000</td>\n      <td>95000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>44.000000</td>\n      <td>15.000000</td>\n      <td>140000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>53.000000</td>\n      <td>25.000000</td>\n      <td>250000.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlotting distribution of each quantitative feature (histogram and boxplot)\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfor col in df.select_dtypes(include=[\"float\",'int']).columns:\n    plt.hist(df[col], bins=10)\n    plt.xlabel(col)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Distribution of \" + col)\n    plt.show()\n    plt.boxplot(df[col])\n    plt.ylabel(col)\n    plt.title(\"Box Plot of \" + col)\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-1.png){width=585 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-2.png){width=585 height=431}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-3.png){width=585 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-4.png){width=585 height=431}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-5.png){width=586 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-11-output-6.png){width=618 height=431}\n:::\n:::\n\n\nPlotting distribution of categorical features (bar chart)\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfor col in df.select_dtypes(\"object\").columns:\n    value_counts=df[col].value_counts()\n    if col == \"Job Title\": plt.figure(figsize=(20,20))\n    else: plt.figure(figsize=(10,10))\n    value_counts.plot.bar()\n    plt.xlabel(\"Category\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Bar chart of \" + col)\n    plt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-12-output-1.png){width=816 height=854}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-12-output-2.png){width=816 height=875}\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-12-output-3.png){width=1554 height=1808}\n:::\n:::\n\n\nIdentifying potential outliers by calculating 1.5\\*Interquartile range\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfor col in df.select_dtypes('float').columns:\n    q1=np.percentile(df[col],25)\n    q3=np.percentile(df[col],75)\n    iqr=q3-q1\n    inf=q1-(1.5)*iqr\n    sup=q3+(1.5)*iqr\n    outliers = df[(df[col] < inf) | (df[col] > sup)]\n    print(col,\"Outliers:\", outliers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAge Outliers: Empty DataFrame\nColumns: [Age, Gender, Education Level, Job Title, Years of Experience, Salary]\nIndex: []\nYears of Experience Outliers: Empty DataFrame\nColumns: [Age, Gender, Education Level, Job Title, Years of Experience, Salary]\nIndex: []\nSalary Outliers: Empty DataFrame\nColumns: [Age, Gender, Education Level, Job Title, Years of Experience, Salary]\nIndex: []\n```\n:::\n:::\n\n\nPrinting the mean per unique value in each feature\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfor num_var in df.select_dtypes(\"float\"):\n    for cat_var in df.select_dtypes(\"object\"):\n        mean_per_category = df.groupby(cat_var)[num_var].mean()\n        print(f'Mean of {num_var} per {cat_var}: {mean_per_category}\\n')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean of Age per Gender: Gender\nFemale    37.581006\nMale      37.295221\nName: Age, dtype: float64\n\nMean of Age per Education Level: Education Level\nBachelor's    34.340103\nMaster's      40.765306\nPhD           44.725490\nName: Age, dtype: float64\n\nMean of Age per Job Title: Job Title\nAccount Manager                 32.0\nAccountant                      31.0\nAdministrative Assistant        37.5\nBusiness Analyst                33.5\nBusiness Development Manager    34.0\n                                ... \nUX Designer                     34.0\nUX Researcher                   27.0\nVP of Finance                   47.0\nVP of Operations                47.0\nWeb Developer                   33.0\nName: Age, Length: 174, dtype: float64\n\nMean of Years of Experience per Gender: Gender\nFemale    10.011173\nMale      10.048784\nName: Years of Experience, dtype: float64\n\nMean of Years of Experience per Education Level: Education Level\nBachelor's     6.993636\nMaster's      13.397959\nPhD           17.019608\nName: Years of Experience, dtype: float64\n\nMean of Years of Experience per Job Title: Job Title\nAccount Manager                  5.0\nAccountant                       4.0\nAdministrative Assistant         9.0\nBusiness Analyst                 6.0\nBusiness Development Manager     8.0\n                                ... \nUX Designer                      5.0\nUX Researcher                    2.0\nVP of Finance                   19.0\nVP of Operations                19.0\nWeb Developer                    6.0\nName: Years of Experience, Length: 174, dtype: float64\n\nMean of Salary per Gender: Gender\nFemale     97011.173184\nMale      103834.207611\nName: Salary, dtype: float64\n\nMean of Salary per Education Level: Education Level\nBachelor's     74984.534034\nMaster's      129795.918367\nPhD           157843.137255\nName: Salary, dtype: float64\n\nMean of Salary per Job Title: Job Title\nAccount Manager                  75000.0\nAccountant                       55000.0\nAdministrative Assistant         50000.0\nBusiness Analyst                 77500.0\nBusiness Development Manager     90000.0\n                                  ...   \nUX Designer                      80000.0\nUX Researcher                    65000.0\nVP of Finance                   200000.0\nVP of Operations                190000.0\nWeb Developer                    65000.0\nName: Salary, Length: 174, dtype: float64\n\n```\n:::\n:::\n\n\nMapping categorical values to numerical values (Gender to 0/1, Education to numbers 1-3)\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_standarized=df\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndic_gender={\"Male\":0,\"Female\":1}\ndf_standarized['Gender']=df_standarized['Gender'].map(dic_gender)\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndic_job={\"Bachelor's\":1,\"Master's\":2,\"PhD\":3}\ndf_standarized['Education Level']=df_standarized['Education Level'].map(dic_job)\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# standardized_correlation_matrix = df_standarized.corr()\n# standardized_correlation_matrix\n```\n:::\n\n\nInvestigating the correlations between each feature\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# plt.figure(figsize=(10,10))\n# sns.heatmap(standardized_correlation_matrix, annot=True, cmap=\"coolwarm\")\n# plt.title(\"Correlation Matrix\")\n# plt.show()\n```\n:::\n\n\nLooking at trends in features across each categorical values\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsns.pairplot(df_standarized,hue=\"Education Level\");\nplt.title(\"Feature Trends Across Education Level\");\nplt.show();\n```\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-20-output-1.png){width=1072 height=947}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nsns.pairplot(df_standarized,hue=\"Gender\");\nplt.title(\"Feature Trends Across Genders\");\nplt.show();\n```\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-21-output-1.png){width=1015 height=947}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf_standarized_final=df_standarized.drop(\"Job Title\",axis=1)\n```\n:::\n\n\n### Splitting data into labels and features\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndef pre_processing(df):\n    X=df.drop('Salary',axis=1)\n    Y=df['Salary']\n    return X,Y\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ntrain_set,test_set=train_test_split(df_standarized_final,test_size=0.25, random_state=0)\ntrain_set.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n(281, 5)\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nX_train, y_train = pre_processing(train_set)\nX_test, y_test = pre_processing(test_set)\n```\n:::\n\n\n## Linear Regression Model\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndef evalution(model):\n    model.fit(X_train , y_train)\n    Ypred=model.predict(X_test)\n    plt.figure(figsize=(15,15))\n    plt.xlim(0, 210000)\n    plt.ylim(0, 210000)\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(\"Predicted Salary vs. Actual Salary\")\n    plt.scatter(y_test,Ypred,s=200)\n    plt.plot(np.unique(y_test), np.poly1d(np.polyfit(y_test, Ypred, 1))(np.unique(y_test)), color='red')\n    plt.legend()\n\n```\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nmodel=LinearRegression()\nevalution(model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-28-output-2.png){width=1214 height=1189}\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nmodel.coef_, model.intercept_\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n(array([ 2786.22513618, -8748.91442528, 13607.18601302,  2993.79564504]),\n -50711.1832091954)\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2: 0.9289134708887314\nMAE: 9379.911146982055\nMSE: 158110407.0420734\nRMSE: 12574.196079355268\n```\n:::\n:::\n\n\n### Support Vector Regression Model\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nmodel=SVR(kernel=\"linear\")\nevalution(model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_files/figure-html/cell-31-output-2.png){width=1214 height=1189}\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ntest_x=X_test\npred=model.predict(X_test)\nprint(\"R^2:\",metrics.r2_score(y_test, pred))\nprint(\"MAE:\",metrics.mean_absolute_error(y_test, pred))\nprint(\"MSE:\",metrics.mean_squared_error(y_test, pred))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test, pred)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2: 0.5686720296764955\nMAE: 25934.699187513485\nMSE: 959358148.5703752\nRMSE: 30973.5072048739\n```\n:::\n:::\n\n\n",
    "supporting": [
      "regression_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}